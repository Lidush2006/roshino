import os
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv('BOT_TOKEN', '7975067288:AAFTla7aHo16IZdTEUtGTlgfsyDxpG0FGi0')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '7302368349'))
TECH_SUPPORT_USERNAME = os.getenv('TECH_SUPPORT_USERNAME', '@Jishsl')
WEBSITE_URL = os.getenv('WEBSITE_URL', 'https://lidush2006.github.io/-_-/')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
NAME, PHONE, RENT_TYPE, ADDRESS, ROOMS, DESCRIPTION, PRICE, PHOTOS = range(8)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –°—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–∞–π—Ç–∞ –†–æ—â–∏–Ω—Å–∫–∏–π –î–æ–º.\n\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∫–≤–∞—Ä—Ç–∏—Ä "
        "–Ω–∞ —Å–∞–π—Ç–µ –†–æ—â–∏–Ω—Å–∫–∏–π –î–æ–º. –ê —Ç–∞–∫–∂–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–∞–π—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text(
            "üë§ *–í–∞—à–µ –∏–º—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -)*\n_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω_",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME

    elif text == "üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {TECH_SUPPORT_USERNAME}\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
                [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
            ], resize_keyboard=True)
        )
        return ConversationHandler.END

    elif text == "üåê –°–∞–π—Ç":
        await update.message.reply_text(
            f"üåê –ù–∞—à —Å–∞–π—Ç: {WEBSITE_URL}",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
                [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
            ], resize_keyboard=True)
        )
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return ConversationHandler.END


# –®–∞–≥ 1: –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "üìû *–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n_–ü—Ä–∏–º–µ—Ä: +7 XXX XXX XX XX_",
        parse_mode='Markdown'
    )
    return PHONE


# –®–∞–≥ 2: –¢–µ–ª–µ—Ñ–æ–Ω
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text

    keyboard = [[KeyboardButton("üè† –ü–æ—Å—É—Ç–æ—á–Ω–æ"), KeyboardButton("üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üè† *–ö–∞–∫ –≤—ã —Å–¥–∞–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É?*",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return RENT_TYPE


# –®–∞–≥ 3: –¢–∏–ø –∞—Ä–µ–Ω–¥—ã
async def get_rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rent_type'] = update.message.text
    await update.message.reply_text(
        "üìç *–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -)*\n_–ü—Ä–∏–º–µ—Ä: –î–æ–º.13, –∫–≤.4_",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return ADDRESS


# –®–∞–≥ 4: –ê–¥—Ä–µ—Å
async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text

    keyboard = [
        [KeyboardButton("1 –∫–æ–º–Ω–∞—Ç–Ω–∞—è"), KeyboardButton("2-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è")],
        [KeyboardButton("3-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è"), KeyboardButton("4-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üõè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç*",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return ROOMS


# –®–∞–≥ 5: –ö–æ–º–Ω–∞—Ç—ã
async def get_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rooms'] = update.message.text
    await update.message.reply_text(
        "üìù *–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return DESCRIPTION


# –®–∞–≥ 6: –û–ø–∏—Å–∞–Ω–∏–µ
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text(
        "üí∞ *–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–µ—Å–ª–∏ —Ü–µ–Ω–∞ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ)*\n_–ü—Ä–∏–º–µ—Ä: 25000 —Ä—É–±/–º–µ—Å  / –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è",
        parse_mode='Markdown'
    )
    return PRICE


# –®–∞–≥ 7: –¶–µ–Ω–∞
async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = update.message.text
    await update.message.reply_text(
        "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ "
        "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
    )
    return PHOTOS


# –®–∞–≥ 8: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def get_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        return await send_to_admin(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []

    if update.message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        context.user_data['photos'].append(photo_file.file_id)
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")

    return PHOTOS


# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def send_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    message = (
        "üÜï *–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï*\n\n"
        f"üë§ *–ò–º—è:* {user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data['phone']}\n"
        f"üè† *–¢–∏–ø –∞—Ä–µ–Ω–¥—ã:* {user_data['rent_type']}\n"
        f"üìç *–ê–¥—Ä–µ—Å:* {user_data['address']}\n"
        f"üõè *–ö–æ–º–Ω–∞—Ç:* {user_data['rooms']}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {user_data['price']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data['description']}\n\n"
        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* @{update.effective_user.username or '–ù–µ—Ç username'}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'photos' in user_data and user_data['photos']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=user_data['photos'][0],
                caption=message,
                parse_mode='Markdown'
            )
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            for photo_id in user_data['photos'][1:]:
                await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo_id)
        else:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                parse_mode='Markdown'
            )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_message = (
            "‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n\n"
            "–ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É, "
            "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n\n"
            "–í —Å–ª—É—á–∞–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∫–∏—Ö-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–ª–µ–º –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ "
            "–∏ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º."
        )

        await update.message.reply_text(
            success_message,
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
                [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
            ], resize_keyboard=True)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
                [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
            ], resize_keyboard=True)
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üåê –°–∞–π—Ç")]
        ], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), main_menu_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            RENT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rent_type)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rooms)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            PHOTOS: [
                MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –ì–æ—Ç–æ–≤–æ$"), get_photos),
                MessageHandler(filters.PHOTO, get_photos)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == "__main__":
    main()